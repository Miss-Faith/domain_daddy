import type { AppProps } from 'next/app'
import { useEffect, useState } from 'react'
import { ethers } from 'ethers'

import '../styles/globals.css'
import '../styles/Home.module.css'
import '../styles/index.css'

// Components
import Navigation from '../components/Navigation'
import Search from '../components/Search'
import Domain from '../components/Domain'

import Head from 'next/head'
import Image from 'next/image'

// add bootstrap css 
import 'bootstrap/dist/css/bootstrap.css'

// Import abi
import abi from "../utils/DomainDaddy.json";

declare global {
  interface Window {
    ethereum?: any;
  }
}

export default function App({ Component, pageProps }: AppProps) {
  const contractAddress = "0xb7ae0bDDf7351915A857c7dA0f7D2bE2bE82d763";
  const contractABI = abi.abi;

  const [provider, setProvider] = useState<any>("")
  const [account, setAccount] = useState("")

  const [dDaddy, setDomainDaddy] = useState<any>("")
  const [domains, setDomains] = useState<any[]>([]);

  const loadBlockchainData = async () => {
    const provider = new ethers.providers.Web3Provider(window.ethereum)
    setProvider(provider)

    const network = await provider.getNetwork()
    const dDaddy = new ethers.Contract(
      contractAddress, 
      contractABI,
      provider
    );
    setDomainDaddy(dDaddy)

    const maxSupply = await dDaddy.maxSupply()
    const domains = []

    for (var i = 1; i <= maxSupply; i++) {
      const domain = await dDaddy.getDomain(i)
      domains.push(domain)
    }

    setDomains(domains)

    window.ethereum.on('accountsChanged', async () => {
      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
      const account = ethers.utils.getAddress(accounts[0])
      setAccount(account);
    })
  }

  useEffect(() => {
    loadBlockchainData()
  }, [])
  return (
    <div>
      <Head>
        <title>Domain Daddy</title>
        <meta name="description" content="Generated by Domain Daddy" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navigation account={account} setAccount={setAccount} />

      <Search />

      <main>

        <div className='cards__section'>
          <h2 className='cards__title'>Why you need a domain name.</h2>
          <p className='cards__description'>
            Own your custom username, use it across services, and
            be able to store an avatar and other profile data.
          </p>

          <hr />

          <div className='cards'>
            {domains.map((domain, index) => (
              <Domain domain={domain} dDaddy={dDaddy} provider={provider} id={index + 1} key={index} />
            ))}
          </div>
        </div>
      </main>

      <footer>
        <span className='cards__description'>
          Powered by {'Domain Daddy'}
        </span>
      </footer>

    </div>
  );
}